{"version":3,"file":"bundle.js","mappings":";;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,yBAAyB;AACzB,mBAAmB;AACnB,WAAW;AACX;AACA;AACA;AACA,oBAAoB,OAAO,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,wCAAwC;AAC5E;AACA;AACA;AACA;AACA,eAAe,WAAW,IAAI,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA,eAAe;AACf,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,mBAAmB,iBAAiB,IAAI,QAAQ,IAAI,cAAc;AAClE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe,QAAQ,IAAI,aAAa;AAC1E;AACA,mCAAmC,eAAe,aAAa,KAAK;AACpE,yCAAyC,eAAe,aAAa,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://cursotypescript/./src/index.ts"],"sourcesContent":["\"use strict\";\n// Tipos de datos\n/**\n * string\n * number - enteros y decimales\n * boolean - true / false\n * null\n * undefined\n */\n// Existe también el tipo any pero se supone que esta prohibido\n// Tipos de variables\nvar nombre = \"Pedro\"; // Variable global\nlet apellido = \"Blanco\"; // Variable local\nconst PI = 3.1415; // Constante (Nunca cambia)\n// PI = 2; // Si descomentas esto, veras el error de la constante\n// Formas de concatenar un Print\nconsole.log(\"Hola \" + nombre + \" \" + apellido);\nconsole.log(\"Hola \" + nombre, apellido);\nconsole.log(`Hola ${nombre}`); // Son tildes francesas, no comillas simples\n// Declarar varias variables en una línea\nlet a = \"QueloQue\", b = 2, c = false;\n``;\n// Array de datos   \nlet alumnos = [\"Juan\", \"Jose\", \"Alex\"];\n// Array de datos de 3 tipos\nlet valores = [3, \"Hola\", 2, true]; //No tiene porque estar ordenado los datos dentro del array según los tipos declarados\n// Forma de juntar 2 arrays en un array e incluso agregar\nlet alumnos1A = [\"Juan\", \"Pedro\", \"Fran\"];\nlet alumnos2A = [\"Jose\"];\nlet alumnosTodos = [...alumnos1A, ...alumnos2A, \"Pablo\"];\nconsole.log(alumnosTodos);\n// declarar Bloques de datos\nlet misDatos = {\n    nombre: \"Vargas\",\n    apellidos: \"Blanco\",\n    edad: 18\n};\nlet configuracion = Object.assign({ versionTS: \"Es6\", versionCodigo: \"1.0\" }, misDatos);\n// guardar datos del bloque en una variable\nlet propiedad1 = configuracion.versionTS;\nlet propiedad2 = configuracion.nombre;\n// Mostrar variables con los datos\nconsole.log(`${propiedad1}, ${propiedad2}`);\nvar EstadoTarea;\n(function (EstadoTarea) {\n    EstadoTarea[EstadoTarea[\"Pendiete\"] = 0] = \"Pendiete\";\n    EstadoTarea[EstadoTarea[\"En proceso\"] = 1] = \"En proceso\";\n    EstadoTarea[EstadoTarea[\"Terminado\"] = 2] = \"Terminado\";\n})(EstadoTarea || (EstadoTarea = {}));\n;\nlet estadoPendiente = EstadoTarea[\"En proceso\"]; //Devolverá su clave (en este caso un 1, al estar en la segnda posicion del enum)\nvar EstadoTarea2;\n(function (EstadoTarea2) {\n    EstadoTarea2[\"Pendiete\"] = \"P\";\n    EstadoTarea2[\"En proceso\"] = \"E\";\n    EstadoTarea2[\"Terminado\"] = \"T\";\n})(EstadoTarea2 || (EstadoTarea2 = {}));\n;\nlet estadoPendiente2 = EstadoTarea[\"En proceso\"]; //Devolverá su clave (en este caso un E)\nconsole.log(EstadoTarea[\"En proceso\"]);\nconsole.log(EstadoTarea2[\"En proceso\"]);\n;\n// Crear un bloque de datos con la interfaz creada. (Tiene que contener las variables y sus tipos declaradas en el bloque)\nlet tarea1 = { nombre: \"Tarea1\", prioridad: 2, estado: EstadoTarea2.Terminado };\nlet empleado1 = { nombre: \"Jose\", edad: 18, sueldo: 15000 };\nconsole.log(empleado1.edad);\nlet empleado2;\nempleado2 = { edad: 18, cod: \"123\", nombre: \"Juan\", sueldo: 1500 };\nconsole.log(empleado2.cod);\n// Operador Ternario\n// condicion ? verdadero : falso\nconsole.log(tarea1.estado == \"E\" ? `La tarea esta en proceso` : `No esta en proceso`);\n// IF-ELSE\nif (tarea1.estado == \"P\") {\n}\nelse {\n}\n// SWITCH\nswitch (tarea1.estado) {\n    case \"P\":\n        console.log(\"Tarea en pendiente\");\n        break;\n    case \"E\":\n        console.log(\"Tarea en proceso\");\n        break;\n    case \"T\":\n        console.log(\"Tarea terminada\");\n        break;\n    default:\n        console.log(\"Tiene otro estado o no tiene\");\n        break;\n}\ntry {\n    let numero1 = 1;\n    console.log(numero1.toString());\n}\ncatch (error) {\n    console.log(\"Se ha producido un error\", error);\n}\n/**\n * Estructura de repetición - Bucles :\n */\nlet tarea2 = { estado: EstadoTarea2.Terminado, nombre: \"Tarea 2\", prioridad: 0 };\nlet listadoTareas = [tarea1, tarea2];\n//FOREACH\nlistadoTareas.forEach((elemento, indice, listadoTareas) => {\n    console.log(`${elemento.nombre} - ${indice} - ${listadoTareas}`);\n});\n/**\n * FOR\n * Cuando trabajamos con tipos de datos no funciona\n * for (const tarea: Tarea in listadoTareas){}\n */\n// FOR CLÁSICO\nfor (let index = 0; index < listadoTareas.length; index++) {\n    let elemento = listadoTareas[index];\n}\n;\n//while() {\n//};\n//do {\n//} while ();\n//Funciones con parámeros por defecto\nfunction saludarDefault(nombre = \"Jose\") {\n    console.log(`Hola ${nombre}, qué tal estas?`);\n}\nsaludarDefault();\nsaludarDefault(\"Juan\");\n//Funciones con parámeros opcionales\nfunction saludarOpcional(nombre) {\n    let nombreParam = nombre;\n    if (nombreParam == undefined) {\n        nombreParam = \"Nombre Defecto\";\n    }\n    console.log(`Hola ${nombreParam}, qué tal estas?`);\n}\nsaludarOpcional();\n// Funciones con parámetros de varios tipos\nfunction variosTipos(a) {\n    if (typeof (a) == \"string\") {\n        console.log(\"a es un string\");\n    }\n    else {\n        console.log(\"a es un number\");\n    }\n}\nvariosTipos(1);\n// Función con retorno: return\nfunction suma(a, b) {\n    return a + b;\n}\n// Podemos almacenar directamente el valor devuelto de la función en una variable\nvar resultadoSuma = suma(1, 2);\nconsole.log(resultadoSuma);\nconsole.log(suma(1, 2));\n// Funciones anónimas: no se especifica un nombre.\n/**\n * Suma dos valores\n * @param valor1 primer valor\n * @param valor2 segundo valor\n * @returns devuelve la suma de valor1 y valor2\n */\nconst funcRestar = function (valor1, valor2) {\n    return valor1 - valor2;\n};\n/**\n * Funciones, rest parameters (parámetros rest)\n * Permite definir funciones que tomen un número indeterminado de argumentos\n */\nfunction multiParam(...nombres) {\n    nombres.forEach((nombre) => {\n        console.log(nombre);\n    });\n}\n// Llamada a función multiparámetros\nmultiParam(\"Alex\", \"Martin\");\n// A las funciones rest también se le puede pasar una lista de elementos\nlet listaNombres = [\"Leandro\", \"Francisco\"];\nmultiParam(...listaNombres);\nlet farrow = (tarea, indice) => { console.log(`${indice} - ${tarea.nombre}`); };\nlistadoTareas.forEach(farrow);\nlistadoTareas.forEach((tarea) => { console.log(`${tarea.nombre}`); });\nlistadoTareas.forEach(function (tarea) { console.log(`${tarea.nombre}`); });\n// CALLBACK\nlet fsuma = function suma(a, b) {\n    return a + b;\n};\nlet fresta = function resta(a, b) {\n    return a - b;\n};\n// En este ejemplo estamos definiendo que la función opera espera recibir como parámetro una función CallBack\n// Concretamente, estamos diciendo que la función como entrada tiene que tener dos parámetros y devolver un número\n// Cuando se llama a dicha función CallBack desde la función principal se le pasan dichos parámetros y se vuelve a operar con el resultado\nfunction opera(x, y, funcion) {\n    return funcion(x, y);\n}\nopera(2, 3, fsuma);\nopera(2, 3, fresta);\n"],"names":[],"sourceRoot":""}